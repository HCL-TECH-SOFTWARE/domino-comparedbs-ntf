---
class: 512
flags: 0x2000
unid: OF443A992B2300F61F-ON007ADDB1862586DB
items:
  - name: $DesignerVersion
    type: text
    data: 8.5.3
    signed: true
  - name: $Flags
    type: text
    data: 34Qs
  - name: $PublicAccess
    type: text
    data: "1"
    signed: true
  - name: $Revisions
    type: time
    data:
      - data: "2021-09-16T12:02:35.57-05:00"
        dst: true
      - data: "2021-09-27T13:59:55.18-05:00"
        dst: true
      - data: "2021-09-27T17:14:08.44-04:00"
        dst: true
      - data: "2021-09-27T17:14:08.50-04:00"
        dst: true
      - data: "2021-09-27T20:07:50.94-04:00"
        dst: true
      - data: "2021-09-27T20:07:50.95-04:00"
        dst: true
      - data: "2021-09-27T22:33:21.78-05:00"
        dst: true
      - data: "2021-09-28T08:49:46.41-04:00"
        dst: true
      - data: "2021-09-28T08:49:46.49-04:00"
        dst: true
      - data: "2021-11-18T08:32:51.79-06:00"
      - data: "2021-11-18T08:32:51.83-06:00"
      - data: "2021-11-29T13:23:58.84-05:00"
      - data: "2021-11-29T13:23:58.87-05:00"
      - data: "2021-11-29T13:24:34.25-05:00"
  - name: $ScriptLib
    type: text
    data: |
      '++LotusScript Development Environment:2:5:(Options):0:74
      %REM
      	Library DOMUtils
      	Description: Several functions to do some operations not directly supported
      		by the built-in DOM parser.
      	Â© Copyright HCL Software. 2021
      %END REM
      Option Public
      Option Declare
      Use "lsconst"
      
      '++LotusScript Development Environment:2:5:(Forward):0:1
      Declare Public Class RichTextXMLSerializer
      Declare Public Class styleTheme
      Declare Function DU_GetTextFromNodeInclCDATA(elPar As NotesDOMElementNode) As String
      Declare Sub DU_InsertBefore(domdoc As NotesDOMDocumentNode, nodeTarget, nodeNew)
      Declare Function DU_GetDocNode(node As NotesDOMNode) As NotesDOMDocumentNode
      Declare Function DU_GetPrevSibNamed(elCur As NotesDOMNode, ByVal szName$) As NotesDOMElementNode
      Declare Function DU_GetChildWithAttr(elParent As NotesDOMElementNode, ByVal targetElement$, ByVal attrName$, ByVal attrValue$, ByVal flags%) As NotesDOMElementNode
      Declare Function DOM_FirstElementChild(domePar As NotesDOMElementNode) As NotesDOMElementNode
      Declare Function DU_serializeattrs(el As NotesDOMElementNode, ByVal bSimple As Boolean) As String
      Declare Function DU_SimpleLog(logg$) As String
      Declare Sub DU_ReplaceText(domd As NotesDOMDocumentNode, el As NotesDOMElementNode, newText$, bCdata As Boolean)
      Declare Function DU_GetTextChild(el As NotesDOMElementNode) As NotesDOMTextNode
      Declare Function DU_GetTextFromNode(dome As NotesDOMElementNode) As String
      Declare Function StreamToBase64(streamIn As NotesStream) As String
      Declare Function DU_GetPrevElement(elCur As NotesDOMNode) As NotesDOMElementNode
      Declare Sub DU_AddAttrs(el As NotesDOMElementNode, attrs)
      Declare Function DU_ChildCountByType(elParent As NotesDOMElementNode, seekType As Long) As Long
      Declare Function DU_GetNextOfType(elNode As NotesDOMNode) As NotesDOMNode
      Declare Sub DU_SortChildElements(elParent As NotesDOMElementNode, ByVal tagName$, ByVal attribName$)
      Declare Sub DOM_DiscardChildren(domePar As NotesDOMElementNode)
      Declare Sub DOM_ConvertTextToCData(domePar As NotesDOMElementNode, ddoc As NotesDOMDocumentNode)
      Declare Function StreamToText(streamIn As NotesStream, ByVal chrset$) As String
      Declare Function DU_GetNextElement(elCur As NotesDOMElementNode) As NotesDOMElementNode
      Declare Function TextToStream(szText$, ByVal chrset$) As NotesStream
      Declare Function DU_Serialize(el As NotesDOMNode, bOnlyKids As Boolean) As String
      Declare Function DU_GetChildNamed(ByVal target$, dome As NotesDOMElementNode) As NotesDOMElementNode
      Declare Function DU_GetChildOfType(elParent As NotesDOMElementNode, seekType As Long) As NotesDOMNode
      Declare Function DU_RemoveElementAndNewline(el As NotesDOMElementNode) As Boolean
      Declare Function DOM_FirstTextChild(domePar As NotesDOMElementNode) As NotesDOMTextNode
      
      '++LotusScript Development Environment:2:5:(Declarations):0:10
      Const STYLE_FIERY = &h00000001	'emulate Firefox XML styling
      Const STYLE_SHINY = &h00000002	'emulate(ish) Chrome XML styling
      Const STYLE_TO_USE = STYLE_SHINY 'change here for use when exporting design synopsis
      %REM
      	Class RichTextXMLSerializer
      	Description: Class to allow writing serialized XML to a document - supporting formatting/coloring/highlighting
      %END REM
      Public Class RichTextXMLSerializer
      
      	z_sess As NotesSession
      	z_dbThis As NotesDatabase
      	
      	z_richTextItem As NotesRichTextItem
      	
      	z_stream As NotesStream
      	
      	%REM
      	Sub New
      	Description: Instantiate a RichTextXMLSerializer object
      	Arguments: The stream of XML to serialize
      	@@
      	%END REM
      	Public Sub New(rtitem As NotesRichTextItem)
      
      		On Error GoTo ERROR_HANDLER
      
      		Set z_sess = New NotesSession
      		Set z_dbThis = z_sess.Currentdatabase
      		Set z_richTextItem = rtitem
      
      		Exit Sub
      
      ERROR_HANDLER:
      		Error Err, Error & { //}& GetThreadInfo(1) & {:} & Erl
      
      	End Sub
      
      	%REM
      	Sub New
      	Description: Dispose of a RichTextXMLSerializer object
      	@@
      	%END REM
      	Public Sub Delete
      
      	End Sub
      
      	%REM
      	Sub RT_Serialize
      	Description: simple serialize of a DOM tree to a rich text item starting with an element node.
      		We don't worry about special characters; this is rough and ready.
      	Arguments:
      		el: the element to serialize.
      	%END REM
      	Private Sub RT_Serialize(el As NotesDOMNode)
      		Dim achild As NotesDOMNode		
      		On Error GoTo ERRHANDLE
      		Dim theme As New styleTheme(STYLE_TO_USE)
      		
      		Call z_richTextItem.Appendstyle(theme.Default) : Call z_richTextItem.AppendText("<")
      		Call z_richTextItem.AppendStyle(theme.NodeNameStyle) : Call z_richTextItem.AppendText(el.Nodename)
      		Call serializeattrs(el)
      		If el.Haschildnodes Then
      			Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText(">")
      			Set achild = el.Firstchild
      			Do Until achild.Isnull
      				If achild.Nodetype = Domnodetype_element_node Then
      					Call RT_serialize(achild)
      				Else
      					Call z_richTextItem.AppendStyle(theme.NodeNameStyle) : Call z_richTextItem.AppendText(achild.Nodevalue)
      				End If
      				Set achild = achild.Nextsibling
      			Loop
      			Call z_richTextItem.Appendstyle(theme.Default) : Call z_richTextItem.AppendText("</")
      			Call z_richTextItem.AppendStyle(theme.NodeNameStyle) : Call z_richTextItem.AppendText(el.Nodename)
      			Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText(">")
      		Else
      			Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText("/>")
      		End If
      
      		Exit Sub
      ERRHANDLE:
      		Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      	End Sub
      	
      	%REM
      		Sub ProcessStream
      		Description: Comments for Sub
      		@@TODO
      	%END REM
      	Public Sub ProcessStream(stream As NotesStream)
      
      		On Error GoTo ERROR_HANDLER
      
      		Dim domParser As NotesDOMParser
      		Set domParser = z_sess.Createdomparser(stream)
      		
      		Call domParser.Parse
      		Call ProcessDOM(domParser)
      
      		Exit Sub
      
      ERROR_HANDLER:
      		Error Err, Error & { //} & TypeName(Me) & {.} & GetThreadInfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      
      	End Sub
      	
      	%REM
      		Sub ProcessDOM
      		Description: Comments for Sub
      		@@TODO
      	%END REM
      	Public Sub ProcessDOM(parser As NotesDOMParser)
      
      		On Error GoTo ERROR_HANDLER
      
      		Dim docDOM As NotesDOMDocumentNode
      		Set docDOM = parser.Document
      		
      		Call RT_Serialize(docDOM.Documentelement)
      
      		Exit Sub
      
      ERROR_HANDLER:
      		Error Err, Error & { //} & TypeName(Me) & {.} & GetThreadInfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      
      	End Sub
      	
      	'emit text node
      	'containing element
      	'other coloring
      
      	
      	%REM
      	Function DU_serializeattrs
      	Description: Serialize an attribute list of an element node, ignoring special
      		chars.
      	%END REM
      	Private Sub serializeattrs(el As NotesDOMElementNode)
      		Dim dal As NotesDOMNamedNodeMap
      		Dim theme As New styleTheme(STYLE_TO_USE)
      		On Error GoTo ERRHANDLE
      		Set dal = el.Attributes
      		Dim szattrs$, k%, atNode As NotesDOMAttributeNode, aval$
      		For k = 1 To dal.Numberofentries
      			Set atNode = dal.Getitem(k)
      			aval = atNode.Attributevalue 
      
      			If InStr(aval, {'}) = 0 Then
      				'szAttrs = szAttrs & " " & atNode.Attributename & "='" & aval & "'"
      				Call z_richTextItem.AppendText(" ")
      				Call z_richTextItem.AppendStyle(theme.AttrNameStyle) : Call z_richTextItem.AppendText(atNode.Attributename)
      				Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText("='")
      				Call z_richTextItem.AppendStyle(theme.AttrValueStyle) : Call z_richTextItem.AppendText(aval)
      				Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText("'")
      			ElseIf InStr(aval, {"}) = 0 Then
      				'szAttrs = szAttrs & " " & atNode.Attributename & {="} & aval & {"}
      				Call z_richTextItem.AppendStyle(theme.AttrNameStyle) : Call z_richTextItem.AppendText(atNode.Attributename)
      				Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText({="})
      				Call z_richTextItem.AppendStyle(theme.AttrValueStyle) : Call z_richTextItem.AppendText(aval)
      				Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText({"})				
      			Else
      				'szAttrs = szAttrs & " " & atNode.Attributename & "={" & aval & "}"
      				Call z_richTextItem.AppendStyle(theme.AttrNameStyle) : Call z_richTextItem.AppendText(atNode.Attributename)
      				Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText("={")
      				Call z_richTextItem.AppendStyle(theme.AttrValueStyle) : Call z_richTextItem.AppendText(aval)
      				Call z_richTextItem.AppendStyle(theme.Default) : Call z_richTextItem.AppendText("}")
      			End If
      			
      		Next
      		
      		Exit Sub 'Function
      ERRHANDLE:
      		Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      	End Sub
      
      End Class
      %REM
      	Class styleTheme
      	Description: Comments for Class
      	
      %END REM
      Public Class styleTheme
      
      	z_sess As NotesSession
      	z_style As Long
      	z_NodeNameStyle As NotesRichTextStyle
      	z_AttrNameStyle As NotesRichTextStyle
      	z_AttrValueStyle As NotesRichTextStyle
      
      	%REM
      		Sub New
      		Description: Comments for Sub
      		Arguments: theme - options are Chrome or Firefox; 
      	%END REM
      	Public Sub New(theme As Long)
      
      		On Error GoTo ERROR_HANDLER
      
      		Set z_sess = New NotesSession
      		z_style = theme
      		
      		Exit Sub
      
      ERROR_HANDLER:
      		Error Err, Error & { //} & TypeName(Me) & {.} & GetThreadInfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      
      	End Sub
      	
      	%REM
      		Property Get Default
      		Description: 
      	%END REM
      	Public Property Get Default As NotesRichTextStyle
      
      		On Error GoTo ERROR_HANDLER
      
      		If Default Is Nothing Then
      			Set Default = z_sess.Createrichtextstyle()
      			Default.Bold = False
      			Default.Notescolor = COLOR_BLACK
      		End If
      
      		Exit Property
      
      ERROR_HANDLER:
      		Error Err, Error & { //} & TypeName(Me) & {.} & GetThreadInfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Property
      	
      	%REM
      		Property Set NodeName
      		Description: Comments for Property Set
      		@@TODO
      	%END REM
      	Public Property Get NodeNameStyle As NotesRichTextStyle
      
      		On Error GoTo ERROR_HANDLER
      
      		Select Case z_style
      				
      			Case STYLE_FIERY:
      				Set z_NodeNameStyle = z_sess.Createrichtextstyle()
      				z_NodeNameStyle.Bold = True
      				z_NodeNameStyle.Notescolor = COLOR_DARK_MAGENTA
      				z_NodeNameStyle.Notesfont = FONT_ROMAN
      			
      			Case STYLE_SHINY:
      				Set z_NodeNameStyle = z_sess.Createrichtextstyle()
      				z_NodeNameStyle.Bold = False
      				z_NodeNameStyle.Notescolor = COLOR_DARK_MAGENTA
      				z_NodeNameStyle.Notesfont = FONT_COURIER
      				
      			Case Else:
      				Set z_NodeNameStyle = Default
      				
      		End Select
      		
      		Set NodeNameStyle = z_NodeNameStyle
      
      		Exit Property
      
      ERROR_HANDLER:
      		Error Err, Error & { //}& GetThreadInfo(1) & {:} & Erl
      	End Property
      		
      	%REM
      		Property Get AttrName
      		Description: 
      	%END REM
      	Public Property Get AttrNameStyle As NotesRichTextStyle
      
      		On Error GoTo ERROR_HANDLER
      		
      		Select Case z_style
      				
      			Case STYLE_FIERY:
      				Set z_AttrNameStyle = z_sess.Createrichtextstyle()
      				z_AttrNameStyle.Bold = True
      				z_AttrNameStyle.Notescolor = COLOR_BLACK
      				
      			Case STYLE_SHINY:
      				Set z_AttrNameStyle = z_sess.Createrichtextstyle()
      				z_AttrNameStyle.Bold = False
      				z_AttrNameStyle.Notescolor = COLOR_DARK_YELLOW
      				
      			Case Else:
      				Set z_AttrNameStyle = Default
      								
      		End Select
      
      		Set AttrNameStyle = z_AttrNameStyle
      
      		Exit Property
      
      ERROR_HANDLER:
      		Error Err, Error & { //} & TypeName(Me) & {.} & GetThreadInfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Property
      	
      	%REM
      		Property Get AttrValue
      		Description: 
      	%END REM
      	Public Property Get AttrValueStyle As NotesRichTextStyle
      
      		On Error GoTo ERROR_HANDLER
      
      		Select Case z_style
      				
      			Case STYLE_FIERY:
      				Set z_AttrValueStyle = z_sess.Createrichtextstyle()
      				z_AttrValueStyle.Bold = False
      				z_AttrValueStyle.Notescolor = COLOR_BLUE
      				
      			Case STYLE_SHINY:
      				Set z_AttrValueStyle = z_sess.Createrichtextstyle()
      				z_AttrValueStyle.Bold = False
      				z_AttrValueStyle.Notescolor = COLOR_DARK_BLUE
      				
      			Case Else:
      				Set z_AttrValueStyle = Default
      				
      		End Select
      		
      		Set AttrValueStyle = z_AttrValueStyle
      
      		Exit Property
      
      ERROR_HANDLER:
      		Error Err, Error & { //} & TypeName(Me) & {.} & GetThreadInfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Property
      	
      	
      End Class
      '++LotusScript Development Environment:2:1:DU_GetTextFromNodeInclCDATA:5:8
      %REM
      	Function DU_GetTextFromNodeInclCDATA
      	Description: TODO
      %END REM
      Function DU_GetTextFromNodeInclCDATA(elPar As NotesDOMElementNode) As String
      	Dim domn As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = elPar.FirstChild
      	Do Until domn.IsNull
      		If domn.NodeType = DOMNODETYPE_TEXT_NODE Then
      			DU_GetTextFromNodeInclCDATA = domn.NodeValue
      			Exit Function
      		ElseIf domn.NodeType = DOMNODETYPE_CDATASECTION_NODE Then
      			DU_GetTextFromNodeInclCDATA = DU_GetTextFromNodeInclCDATA & domn.NodeValue
      		End If
      		Set domn = domn.NextSibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:2:DU_InsertBefore:10:8
      
      %REM
      	Function DU_InsertBefore
      	Description:
      			Insert a node before another node. The LotusScript
      			DOM implementation doesn't directly support this, but we can punt.
      	Private Sub insertBefore(noCur As NotesDOMNode, noNew As NotesDOMNode)
      	End Sub
      %END REM
      Sub DU_InsertBefore(domdoc As NotesDOMDocumentNode, nodeTarget, nodeNew)
      	Dim frag As NotesDOMDocumentFragmentNode, elPar As NotesDOMElementNode
      	On Error GoTo ERRHANDLE
      	Set frag = domdoc.Createdocumentfragmentnode
      	Set elPar = nodeTarget.Parentnode
      	Dim placeholder As NotesDOMNode
      	Set placeholder = domdoc.Createtextnode("?")
      	elPar.Replacechild placeholder, nodeTarget
      	frag.Appendchild nodeNew
      	frag.Appendchild nodeTarget
      	elPar.Replacechild frag, placeholder
      	Exit Sub
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Sub
      
      '++LotusScript Development Environment:2:1:DU_GetDocNode:7:8
      
      %REM
      	Function DU_GetDocNode
      	Description: Find the DOM "document" node from which a given node was derived.
      		The doc node is needed to create new nodes.
      %END REM
      Function DU_GetDocNode(node As NotesDOMNode) As NotesDOMDocumentNode
      	Dim par As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set par = node
      	Do Until par.Nodetype = DOMNODETYPE_DOCUMENT_NODE
      		Set par = par.Parentnode
      	Loop
      	Set DU_GetDocNode = par
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetPrevSibNamed:9:8
      %REM
      	Function DU_GetPrevSibNamed
      	Description: Find an element node preceding a specified DOM node, which has a specified node name.
      	Arguments:
      		elCur: the starting node.
      		szName: the element name to search for.
      	Return value:
      %END REM
      Function DU_GetPrevSibNamed(elCur As NotesDOMNode, ByVal szName$) As NotesDOMElementNode
      	Dim nTmp As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set nTmp = elCur.Previoussibling
      	Do Until nTmp.isnull
      		If nTmp.Nodetype = DOMNODETYPE_ELEMENT_NODE Then
      			If ntmp.Nodename = szName Then
      				Set DU_GetPrevSibNamed = nTmp
      				Exit Function
      			End If
      		End If
      		Set nTmp = nTmp.Previoussibling
      	Loop 
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetChildWithAttr:15:8
      %REM
      	Function DU_GetChildWithAttr
      	Description: Find a child DOM node with an attribute that has a particular value.
      		Does not recurse into the tree; looking only for immediate descendants. 
      	Parameters:
      		elParent: node whose children you want to search.
      		targetElement: element name of desired child node.
      		attrName: attribute name you want to check.
      		attrValue: attribute value of element you're looking for.
      		flags: string-matching flags to compare attribute, e.g. 1 for case insensitive.
      	Example:
      		Set titleItem = DU_GetChildWithAttr(elView, "item", "name", "$title", 1)
      		finds the first <item> element where name='$title' (case insensitive). 
      %END REM
      Function DU_GetChildWithAttr(elParent As NotesDOMElementNode, ByVal targetElement$, ByVal attrName$, ByVal attrValue$, ByVal flags%) As NotesDOMElementNode
      	Dim node As NotesDOMNode, elTmp As NotesDOMElementNode
      	On Error GoTo ERRHANDLE
      	Set node = elParent.Firstchild
      	Do Until node.Isnull
      		If node.Nodetype = DOMNODETYPE_ELEMENT_NODE Then
      			If node.Nodename = targetElement Then
      				Set elTmp = node
      				If StrComp(elTmp.Getattribute(attrName), attrValue, flags) = 0 Then
      					Set DU_GetChildWithAttr = elTmp
      					Exit Function
      				End If
      			End If
      		End If
      		Set node = node.Nextsibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DOM_FirstElementChild:6:8
      
      %REM
      	Function DOM_FirstElementChild
      	Description: Return the first child of a specified element, which is an element.
      %END REM
      Function DOM_FirstElementChild(domePar As NotesDOMElementNode) As NotesDOMElementNode
      	Dim domn As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = domePar.Firstchild
      	Do Until domn.Isnull
      		If domn.Nodetype = DOMNODETYPE_ELEMENT_NODE Then
      			Set DOM_FirstElementChild = domn
      		End If
      		Set domn = domn.Nextsibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_serializeattrs:7:8
      
      %REM
      	Function DU_serializeattrs
      	Description: Serialize an attribute list of an element node, ignoring special
      		chars.
      %END REM
      Function DU_serializeattrs(el As NotesDOMElementNode, ByVal bSimple As Boolean) As String
      	Dim dal As NotesDOMNamedNodeMap
      	On Error GoTo ERRHANDLE
      	Set dal = el.Attributes
      	Dim szattrs$, k%, atNode As NotesDOMAttributeNode, aval$
      	For k = 1 To dal.Numberofentries
      		Set atNode = dal.Getitem(k)
      		aval = atNode.Attributevalue 
      		If bSimple Then
      			szAttrs = szAttrs & " " & atNode.Attributename & "=" & aval
      		ElseIf InStr(aval, {'}) = 0 Then
      			szAttrs = szAttrs & " " & atNode.Attributename & "='" & aval & "'"
      		ElseIf InStr(aval, {"}) = 0 Then
      			szAttrs = szAttrs & " " & atNode.Attributename & {="} & aval & {"}
      		Else
      			szAttrs = szAttrs & " " & atNode.Attributename & "={" & aval & "}"
      		End If
      	Next
      	DU_serializeattrs = szAttrs
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_SimpleLog:5:8
      %REM
      	Function DU_SimpleLog
      	Description: remove all the XML chaff from a log message and just give the text
      %END REM
      Function DU_SimpleLog(logg$) As String
      	Dim parts, i%, pre$
      	On Error GoTo ERRHANDLE
      	parts = Split(FullTrim(Replace(logg, {
      }, " ")), "<")
      	For i = 1 To UBound(parts)
      		pre = StrLeft(parts(i), ">")
      		If Len(pre) Then
      			parts(i) = Mid$(parts(i), Len(pre)+2)
      			pre = StrRight(FullTrim(pre), " ")
      			If Len(pre) Then
      				parts(i) = "(" & pre & ") " & parts(i)
      			End If
      		Else
      			parts(i) = "<" & parts(i)
      		End If
      		DU_SimpleLog = FullTrim(Join(parts, " "))
      	Next
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:2:DU_ReplaceText:6:8
      %REM
      	Function DU_ReplaceText
      	Description: An element with a text child (or a CData child), replace the text
      		with a new text node or CDATA node.
      %END REM
      Sub DU_ReplaceText(domd As NotesDOMDocumentNode, el As NotesDOMElementNode, newText$, bCdata As Boolean)
      	Dim domn As NotesDOMNode, nextNode As NotesDOMNode, repNode As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = el.FirstChild
      	Do Until domn.IsNull
      		Set nextNode = domn.nextSibling
      		If domn.NodeType = DOMNODETYPE_TEXT_NODE Or domn.NodeType = Domnodetype_cdatasection_node Then
      			If repNode Is Nothing Then
      				Set repNode = domn
      			Else
      				el.Removechild domn
      			End If
      		ElseIf Not (repNode Is Nothing) Then
      			Exit Do
      		End If
      		Set domn = Nextnode
      	Loop
      	If bCdata Then
      		Set domn = domd.Createcdatasectionnode(newText)
      	Else
      		Set domn = domd.Createtextnode(newText)
      	End If
      	If repNode Is Nothing Then
      		el.Appendchild domn
      	Else
      		el.Replacechild domn, Repnode
      	End If
      	Exit Sub
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Sub
      
      '++LotusScript Development Environment:2:1:DU_GetTextChild:6:8
      
      %REM
      	Function DU_GetTextChild
      	Description: Return the first DOM text node which is a child of the specified node. 
      %END REM
      Function DU_GetTextChild(el As NotesDOMElementNode) As NotesDOMTextNode
      	Dim domn As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = el.FirstChild
      	Do Until domn.IsNull
      		If domn.NodeType = DOMNODETYPE_TEXT_NODE Then
      			Set DU_GetTextChild = domn
      			Exit Function
      		End If
      		Set domn = domn.NextSibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetTextFromNode:6:8
      %REM
      	Function DU_GetTextFromNode
      	Description: Passed a DOM element node that has a text node as one of its children,
      		return the text from that node.
      %END REM
      Function DU_GetTextFromNode(dome As NotesDOMElementNode) As String
      	Dim domn As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = dome.FirstChild
      	Do Until domn.IsNull
      		If domn.NodeType = DOMNODETYPE_TEXT_NODE Then
      			DU_GetTextFromNode = domn.NodeValue
      			Exit Function
      		End If
      		Set domn = domn.NextSibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:StreamToBase64:6:8
      %REM
      	Function StreamToBase64
      	Description: Convert a binary NotesStream to a string of Base64 data.
      		The output can be used as part of DXL data for importing.
      %END REM
      Function StreamToBase64(streamIn As NotesStream) As String
      	On Error GoTo theOldWay
      	' ReadEncoded function is not documented. In case it doesn't work have a backup.
      	StreamToBase64 = Replace(streamIn.ReadEncoded(ENC_BASE64, 76), Chr$(13), "")
      	Exit Function
      	
      theOldWay:
      	Dim session As New NotesSession
      	Dim db As NotesDatabase
      	Dim doc As NotesDocument
      	Dim mime As NotesMIMEEntity
      	
      	Set db = session.CurrentDatabase
      	Set doc = db.CreateDocument
      	Set mime = doc.CreateMIMEEntity("Body")
      	streamIn.Position = 0
      	Call mime.SetContentFromBytes(streamIn, "image/gif", ENC_NONE)
      	mime.EncodeContent(ENC_BASE64)
      	StreamToBase64 = Replace(mime.ContentAsText, Chr$(13), "")
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetPrevElement:7:8
      %REM
      	Function DU_GetPrevElement
      	Description: Given a DOM node, scan backward to find the preceding element node, skipping over nodes of other types.
      	Arguments:
      	Return value:
      %END REM
      Function DU_GetPrevElement(elCur As NotesDOMNode) As NotesDOMElementNode
      	Dim nTmp As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set nTmp = elCur.Previoussibling
      	Do Until nTmp.isnull
      		If nTmp.Nodetype = DOMNODETYPE_ELEMENT_NODE Then
      			Set DU_GetPrevElement = nTmp
      			Exit Function
      		End If
      		Set nTmp = nTmp.Previoussibling
      	Loop 
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:2:DU_AddAttrs:8:8
      
      %REM
      	Sub DU_AddAttrs
      	Description: Add attributes to a DOM element 
      	Arguments:
      		attrs: either a string containing expressions of the form name=value delimited by newlines, or an array of single-attribute entries.
      %END REM
      Sub DU_AddAttrs(el As NotesDOMElementNode, attrs)
      	If IsArray(attrs) Then
      		ForAll thing In attrs
      			el.Setattribute Trim(StrLeft(thing, {=})), StrRight(thing, {=})
      		End ForAll
      	Else
      		DU_AddAttrs el, Split(attrs, {
      })
      	End If
      End Sub
      
      '++LotusScript Development Environment:2:1:DU_ChildCountByType:7:8
      %REM
      	Function DU_ChildCountByType
      	Description: Find out how many child nodes of a stated type the element node has.
      	Arguments:
      	Return value:
      %END REM
      Function DU_ChildCountByType(elParent As NotesDOMElementNode, seekType As Long) As Long
      	Dim node As NotesDOMNode
      	Set node = elParent.Firstchild
      	Do Until node.Isnull
      		If node.Nodetype = seektype Then
      			DU_ChildCountByType = DU_ChildCountByType + 1
      		End If
      		Set node = node.Nextsibling
      	Loop
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetNextOfType:9:8
      %REM
      	Function DU_GetNextOfType
      	Description: Retrieve the next sibling of the current node, which is of the same type as the current node.
      		Useful in conjunction with getChildOfType, for iterating thru all children of a given type.
      	Arguments:
      		elNode: the node whose next sibling of the same type you want to find.
      	Return value: the node you seek, or Nothing if there is no such node.
      %END REM
      Function DU_GetNextOfType(elNode As NotesDOMNode) As NotesDOMNode
      	Dim seektype As Long, elTmp As NotesDOMNode
      	seektype = elNode.Nodetype
      	Set elTmp = elNode.Nextsibling
      	Do Until elTmp.Isnull
      		If elTmp.Nodetype = seektype Then
      			Set DU_GetNextOfType = elTmp
      			Exit Function
      		End If
      		Set elTmp = elNode.Nextsibling
      	Loop
      End Function
      
      '++LotusScript Development Environment:2:2:DU_SortChildElements:10:8
      
      %REM
      	Sub DU_SortChildElements
      	Description: Scan the child elements of a given parent, and sort them alphabetically or numerically
      		based on an attribute value. 
      	Arguments:
      		tagName: the node name of the elements you want to sort.
      		attribName: the attribute you want to sort them by. 
      %END REM
      Sub DU_SortChildElements(elParent As NotesDOMElementNode, ByVal tagName$, ByVal attribName$)
      	Dim nnl As NotesDOMNodeList, i%, k%, bSwapped As Boolean
      	Dim elCur As NotesDOMElementNode, key$, cEnt%
      	Set nnl = elParent.Getelementsbytagname(tagName)
      	cEnt = nnl.Numberofentries
      	If cEnt > 1 Then
      		ReDim keys(0 To cEnt-1) As NotesDOMElementNode
      		For i = cEnt To 1 Step -1
      			Set elCur = nnl.Getitem(i)
      			Set keys(i-1) = elCur
      			key = elCur.Getattribute(Attribname)
      			For k = i To UBound(keys)-1
      				If keys(k).Getattribute(Attribname) < key Then
      					Set keys(k-1) = keys(k)
      				Else
      					Exit For
      				End If
      			Next
      			Set keys(k-1) = elCur
      		Next
      		Delete nnl
      		For i = 0 To cEnt-1
      			Set elCur = keys(i)
      			DU_RemoveElementAndNewline elCur
      		Next
      		For i = 0 To cEnt-1
      			elParent.Appendchild keys(i)
      		Next
      	End If
      End Sub
      
      '++LotusScript Development Environment:2:2:DOM_DiscardChildren:6:8
      
      %REM
      	Sub DOM_DiscardChildren
      	Description: Delete all the children from an element node.
      %END REM
      Sub DOM_DiscardChildren(domePar As NotesDOMElementNode)
      	Dim domnCur As NotesDOMNode, domnNext As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domnCur = domePar.Firstchild
      	Do Until domnCur.Isnull
      		Set domnNext = domnCur.Nextsibling
      		domePar.Removechild domnCur
      		Set domnCur = domnNext
      	Loop
      	Exit Sub
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Sub
      
      '++LotusScript Development Environment:2:2:DOM_ConvertTextToCData:9:8
      
      %REM
      	Sub DOM_ConvertTextToCData
      	Description: Given an element node that's expected to have a text node as a child,
      		change the text node to a CDATA section instead. If the CDATA would contain the
      		section end sequence, "]]>", break it into multiple sections to have the end sequence
      		split between sections.
      %END REM
      Sub DOM_ConvertTextToCData(domePar As NotesDOMElementNode, ddoc As NotesDOMDocumentNode)
      	Dim theText$, domcd As NotesDOMCDATASectionNode, domn As NotesDOMNode, domnNext As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = domePar.Firstchild
      	Do Until domn.Isnull
      		Set domnNext = domn.Nextsibling
      		If domn.nodetype = DOMNODETYPE_TEXT_NODE Then
      			Dim pos%
      			theText = domn.Nodevalue
      			pos = InStr(theText, "]]>")
      			If pos Then
      				Dim domdf As NotesDOMDocumentFragmentNode
      				Set domdf = ddoc.Createdocumentfragmentnode
      				Do
      					Set domcd = ddoc.Createcdatasectionnode(Left$(theText, pos))
      					domdf.Appendchild domcd
      					theText = Mid$(theText, pos+1)
      					pos = InStr(theText, "]]>")
      				Loop While pos > 0
      				Set domcd = ddoc.Createcdatasectionnode(theText)
      				domePar.Replacechild domdf, domn
      			Else ' simple case
      				Set domcd = ddoc.Createcdatasectionnode(theText)
      				domepar.Replacechild domcd, domn
      			End If
      		End If
      		Set domn = domnNext
      	Loop
      	Exit Sub
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Sub
      
      '++LotusScript Development Environment:2:1:StreamToText:8:8
      
      %REM
      	Function StreamToText
      	Description: Convert a NotesStream to text in a specified character set.
      		The default is to interpret NotesStreams as Unicode unless they are
      		attached to a file; this lets you override that. 
      %END REM
      Function StreamToText(streamIn As NotesStream, ByVal chrset$) As String
      	Dim session As New NotesSession
      	Dim db As NotesDatabase
      	Dim doc As NotesDocument
      	Dim mime As NotesMIMEEntity
      	
      	On Error GoTo ERRHANDLE
      	Set db = session.CurrentDatabase
      	Set doc = db.CreateDocument
      	Set mime = doc.CreateMIMEEntity("Body")
      	streamIn.Position = 0
      	Call mime.SetContentFromBytes(streamIn, "text/plain; charset=" & chrset, ENC_NONE)
      	StreamToText = mime.ContentAsText
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetNextElement:7:8
      
      %REM
      	Function DU_GetNextElement
      	Description: Given a DOM element, find its next sibling that's an element
      		(in other words, skip over text and other nodes).
      %END REM
      Function DU_GetNextElement(elCur As NotesDOMElementNode) As NotesDOMElementNode
      	Dim nTmp As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set nTmp = elCur.Nextsibling
      	Do Until nTmp.isnull
      		If nTmp.Nodetype = DOMNODETYPE_ELEMENT_NODE Then
      			Set DU_GetNextElement = nTmp
      			Exit Function
      		End If
      		Set nTmp = nTmp.Nextsibling
      	Loop 
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:TextToStream:9:8
      
      %REM
      	Function TextToStream
      	Description: Produce a stream in a specified character set without opening a file.
      		Unfortunately the NotesStream.charset attribute will still be the default Unicode,
      		but the bytes in the stream will be correct. At some point we may be able to do
      		this by assigning the Charset property and then adding text, but not yet.
      %END REM
      Function TextToStream(szText$, ByVal chrset$) As NotesStream
      	Dim session As New NotesSession
      	Dim streamTmp As NotesStream, doc As NotesDocument, mime As NotesMIMEEntity
      	On Error GoTo ERRHANDLE
      	Set streamTmp = session.Createstream()
      	streamTmp.Writetext szText
      	Set doc = session.Currentdatabase.Createdocument
      	Set mime = doc.Createmimeentity("Body")
      	mime.Setcontentfromtext streamTmp, "text/plain; charset=" & chrset, ENC_NONE
      	Set TextToStream = session.Createstream
      	mime.Getcontentasbytes TextToStream, False
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_Serialize:9:8
      %REM
      	Function DU_Serialize
      	Description: simple serialize of a DOM tree starting with an element node.
      		We don't worry about special characters; this is rough and ready.
      	Arguments:
      		el: the element to serialize.
      		onlyKids: if True return the serialization of only the child nodes and not the element itself.  
      %END REM
      Function DU_Serialize(el As NotesDOMNode, bOnlyKids As Boolean) As String
      	Dim result$, kids$, achild As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set achild = el.Firstchild
      	Do Until achild.Isnull
      		If achild.Nodetype = Domnodetype_element_node Then
      			kids = kids & DU_serialize(achild, False)
      		Else
      			kids = kids & achild.Nodevalue
      		End If
      		Set achild = achild.Nextsibling
      	Loop
      	If bOnlyKids Then
      		DU_Serialize = kids
      	ElseIf kids = "" Then
      		result = "<" & el.Nodename & DU_serializeattrs(el, False) & "/>"
      	Else
      		result = "<" & el.Nodename & DU_serializeattrs(el, False) & {>} & kids & {</} & el.Nodename & {>}
      	End If
      	DU_Serialize = result
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetChildNamed:6:8
      %REM
      	Function DU_GetChildNamed
      	Description: given a name and an element, find the first child of that element with the
      		given tag name.
      %END REM
      Function DU_GetChildNamed(ByVal target$, dome As NotesDOMElementNode) As NotesDOMElementNode
      	Dim domn As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = dome.Firstchild
      	Do Until domn.Isnull
      		If domn.Nodetype = DOMNODETYPE_ELEMENT_NODE Then
      			If domn.Nodename = target Then
      				Set DU_GetChildNamed = domn
      				Exit Function
      			End If
      		End If
      		Set domn = domn.Nextsibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_GetChildOfType:14:8
      %REM
      	Function DU_GetChildOfType
      	Description: Get the first child of an element node that has a particular type.
      	Arguments:
      		elParent: node whose child we seek.
      		seekType: the node type we want. Legal values:
      			DOMNODETYPE_ELEMENT_NODE (1) 
      			DOMNODETYPE_TEXT_NODE (3) 
      			DOMNODETYPE_CDATASECTION_NODE (4) 
      			DOMNODETYPE_COMMENT_NODE (8) 
      			...and others but you're unlikely to use them.
      	Returns: the matching node or Nothing if there was no match.	
      %END REM
      Function DU_GetChildOfType(elParent As NotesDOMElementNode, seekType As Long) As NotesDOMNode
      	Dim node As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set node = elParent.Firstchild
      	Do Until node.isnull
      		If node.Nodetype = seekType Then
      			Set DU_GetChildOfType = node
      			Exit Function
      		End If
      		Set node = node.Nextsibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
      
      '++LotusScript Development Environment:2:1:DU_RemoveElementAndNewline:8:8
      
      %REM
      	Function DU_RemoveElementAndFollowingNewline
      	Description: %TODO
      	Arguments:
      	Returns: TRUE if there was a following newline
      %END REM
      Function DU_RemoveElementAndNewline(el As NotesDOMElementNode) As Boolean
      	Dim elPar As NotesDOMElementNode, nNext As NotesDOMNode
      	Set elPar = el.Parentnode
      	Set nNext = el.Nextsibling
      	If Not (nNext.isnull) Then
      		If nNext.Nodetype = DOMNODETYPE_TEXT_NODE Then
      			If nNext.Nodevalue = NEWLINE Then
      				elPar.Removechild nNext
      				Du_removeelementandnewline = True
      			End If
      		End If
      	End If
      	elPar.Removechild el
      End Function
      
      '++LotusScript Development Environment:2:1:DOM_FirstTextChild:5:8
      %REM
      	Function DOM_FirstTextChild
      	Description: TODO
      %END REM
      Function DOM_FirstTextChild(domePar As NotesDOMElementNode) As NotesDOMTextNode
      	Dim domn As NotesDOMNode
      	On Error GoTo ERRHANDLE
      	Set domn = domePar.Firstchild
      	Do Until domn.Isnull
      		If domn.Nodetype = DOMNODETYPE_TEXT_NODE Then
      			Set DOM_FirstTextChild = domn
      		End If
      		Set domn = domn.Nextsibling
      	Loop
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & GetThreadInfo(1) & {:} & Erl
      End Function
    signed: true
    nonsummary: true
  - name: $TITLE
    type: text
    data: DOMUtils
    signed: true
remaining: []
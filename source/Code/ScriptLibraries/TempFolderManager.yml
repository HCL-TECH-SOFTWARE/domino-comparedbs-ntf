---
class: 512
flags: 0x2000
unid: OF361D8946E249E5CD-ON007ADDB7862586DB
items:
  - name: $Flags
    type: text
    data: 34Qs
  - name: $PublicAccess
    type: text
    data: "1"
    signed: true
  - name: $Revisions
    type: time
    data:
      - data: "2021-05-20T17:22:04.88-05:00"
        dst: true
      - data: "2021-05-27T11:23:20.97-05:00"
        dst: true
      - data: "2021-06-30T17:19:02.80-05:00"
        dst: true
      - data: "2021-06-30T17:19:02.87-05:00"
        dst: true
      - data: "2021-06-30T21:57:33.20-05:00"
        dst: true
      - data: "2021-07-09T08:59:44.34-04:00"
        dst: true
      - data: "2021-07-09T09:01:58.47-04:00"
        dst: true
      - data: "2021-07-09T09:03:04.94-04:00"
        dst: true
      - data: "2021-07-09T09:03:46.98-04:00"
        dst: true
      - data: "2021-07-09T09:21:12.10-04:00"
        dst: true
      - data: "2021-08-17T13:55:03.25-05:00"
        dst: true
      - data: "2021-09-16T12:02:37.02-05:00"
        dst: true
      - data: "2021-09-24T13:07:56.38-05:00"
        dst: true
      - data: "2021-09-24T13:07:56.43-05:00"
        dst: true
      - data: "2021-09-27T13:59:56.57-05:00"
        dst: true
      - data: "2021-09-27T22:33:23.25-05:00"
        dst: true
      - data: "2021-09-28T09:32:14.87-05:00"
        dst: true
  - name: $ScriptLib
    type: text
    data: |
      '++LotusScript Development Environment:2:5:(Options):0:74
      %REM
        	Library TempFolderManager
      	Created by Andre Guirard
      	Description: Contains a class to easily create temporary folders and files.
      	Â© Copyright HCL Company, 2021
      %END REM
      
      Option Public
      Option Declare
      Use "CAPI"
      
      
      '++LotusScript Development Environment:2:5:(Forward):0:1
      Declare Class TempFolderManager
      Declare Sub MakeDir(Byval strDir$)
      Declare Function ClearFolder(Byval strPath$ ) As Boolean
      Declare Function removeFolderRecursive(Byval szPath$, Byval cutoffAge As Double, Byval bDelFolder As Boolean) As Boolean
      
      '++LotusScript Development Environment:2:5:(Declarations):0:10
      %REM
      	Class TempFolderManager
      	Description: Create a folder with a unique name as a subdirectory of the Notes temp folder.
      	When this object is deallocated, delete all the files within the new folder and then
      	(if that succeeded) delete the folder also.
      	
      	Constructor: New TempFolderNamager("folderprefix")
      %END REM
      Class TempFolderManager
      	Private z_path As String
      	Private z_files List As Integer
      	Public FolderPrefix As String
      	Private z_delim As String
      	Private z_api As CAPI
      	
      	' if TRUE, remove the temporary folder and contents when object deallocated. If FALSE, only do this if already empty.
      	Public RemoveOnExit As Boolean
      	
      	%REM
      		Function Unique
      		Description: Return a unique string generated by @Unique, minus the username portion.
      	%END REM
      	Function Unique As String
      		Dim unik
      		On Error Goto ERRHANDLE
      		unik = Evaluate("@Unique")
      		Unique = Strtoken(unik(0), "-", -1) ' drop the username part of the ID which is always the same for this user
      		Exit Function
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Function
      	
      	Sub New(Byval prefix$)
      		On Error Goto ERRHANDLE
      		If Len(prefix) Then FolderPrefix = prefix
      		Set z_api = GetCAPI
      		z_delim = z_api.pathDelimiter
      		z_path = z_api.SystemTempDirectory & FolderPrefix & Unique
      		Mkdir z_path
      		Exit Sub
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Sub
      	
      	%REM
      		Property Get Path
      		Description: Returns the path of the temporary folder this class created for you.
      	%END REM
      	Public Property Get Path As String
      		On Error Goto ERRHANDLE
      		Path = z_path
      		Exit Property
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Property
      	
      	%REM
      		Function CreateFilename
      		Description: Return the full filepath of a new file that doesn't exist yet.
      		Arguments suffix is the file suffix, e.g. "html". bManage says that you want
      		this class to manage the file, i.e. when the object is deallocated, delete
      		the file also.
      	%END REM
      	Function CreateFilename(Byval strSuffix$, Byval bManage As Boolean) As String
      		Dim strFName$
      		On Error Goto ERRHANDLE
      		strFName = Unique
      		If strSuffix <> "" Then strFName = strFName & "." & strSuffix
      		CreateFilename = z_path & z_delim & strFName
      		If bManage Then
      			z_files(CreateFilename) = 0
      		End If
      		Exit Function
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Function
      	
      	%REM
      		Sub Manage
      		Description: Register this file to be deleted when this object is deallocated.
      	%END REM
      	Sub Manage(Byval strPath$)
      		On Error Goto ERRHANDLE
      		z_files(strPath) = 1
      		Exit Sub
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Sub
      	
      	%REM
      		Sub Unmanage
      		Description: Do not delete this file when the object is deallocated.
      	%END REM
      	Sub Unmanage(Byval strPath$)
      		On Error Resume Next
      		Erase z_files(strPath)
      	End Sub
      	
      	%REM
      		Function ClearFiles
      		Description: Erase all files under management but leave the directory so that
      		we can use it more. Return True if all files were successfully erased (including
      		if there was nothing to erase).
      	%END REM
      	Function ClearFiles( ) As Boolean
      		On Error Goto failed
      		ClearFiles = True
      		Forall ffileno In z_files
      			Kill Listtag(ffileno)
      nextFile:
      		End Forall
      		Erase z_files
      		Exit Function
      failed:
      		ClearFiles = False
      		Resume nextFile
      	End Function
      	
      	Function isFolderEmpty(path$) As Boolean
      		Dim nam$
      		nam = Dir$(z_api.TerminatePath(path) & "*", 22)
      		Do Until nam = ""
      			If nam <> "." And nam <> ".." Then
      				Exit Function 
      			End If
      			nam = Dir$
      		Loop
      		isFolderEmpty = True
      	End Function
      	
      	Sub Delete
      		On Error Resume Next
      		Dim emptied As Boolean
      		If RemoveOnExit Then emptied = ClearAllFiles Else emptied = ClearFiles
      		If isfolderempty(z_path) Then
      			RmDir z_path
      		End If
      	End Sub
      	
      	%REM
      		Sub CleanupOldFolders
      		Description: If you've used this class before and created temporary folders,
      		but then left files behind in them so that the folders could not be deleted,
      		this routine lets you clean them up. The cutoffAge parameter specifies how
      		old files and folders have to be, in days, for this routine to clean them
      		up. A value of 0, of course, will clean up everything.  The current temp
      		folder managed by this class will not be cleaned (see ClearAllFiles for that).
      	%END REM
      	Sub CleanupOldFolders(cutoffAge As Double)
      		Dim szNotesTmp$, szFolder$, szMine$, toKill List As Integer
      		On Error Goto ERRHANDLE
      		szNotesTmp = Strleftback(z_path, z_delim)
      		szMine = Strrightback(z_path, z_delim)
      		szFolder = Dir$(szNotesTmp & z_delim & FolderPrefix & "??????", 16)
      		Do While Len(szFolder)
      			If szFolder <> szMine Then
      				If Not (Right$(szFolder, 6) Like "*[!2-9A-HJ-NP-Z]*") Then
      					' matches the pattern of a temp folder name
      					toKill(szFolder) = 1
      				End If
      			End If
      			szFolder = Dir$
      		Loop
      		
      		Forall folderKey In toKill
      			Call removeFolderRecursive(szNotesTmp & z_delim & Listtag(folderkey), cutoffAge, True)
      		End Forall
      		Exit Sub
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Sub
      	
      	%REM
      		Function ClearAllFiles
      		Description: Remove all files in the temp folder whether we manage them or not.
      		This also descends into subdirectories.
      		Returns: True if contents successfully deleted (including if there was nothing to delete)
      	%END REM
      	Function ClearAllFiles( ) As Boolean
      		On Error Goto ERRHANDLE
      		ClearAllFiles = removeFolderRecursive(z_path, 0, False)
      		Exit Function
      ERRHANDLE:
      		Error Err, Error & { //} & Typename(Me) & {.} & Getthreadinfo(1) & {:} & Erl & (Erl-Getthreadinfo(0))
      	End Function
      	
      End Class
      '++LotusScript Development Environment:2:2:MakeDir:6:8
      %REM
      	Function MakeDir
      	Description: Create a directory with the specified path. Parent directories are also created, if
      		they don't exist.
      %END REM
      Sub MakeDir(Byval strDir$)
      	Dim stack$ ' the list of directories we need to create
      	Dim parts, i%, ptr%, ppre$
      
      	On Error Goto ERRHANDLE
      	If (Left$(strdir, 2) = "\\") Then
      		ppre = "\\"
      		Strdir = Mid$(Strdir, 3)
      	End If
      	strDir = Replace(strDir, "\", "/") ' / works on all OS and simplifies our code.
      	strDir = Replace(strDir, "//", "/")
      	If Right$(strDir, 1) = "/" Then strDir = Strleftback(strDir, "/")
      	On Error Goto oops
      	On Error 76 Goto parentDoesNotExist
      	On Error 75 Goto maybeExists
      	Mkdir ppre & strDir
      	' if we got here, it worked.
      	Exit Sub
      
      maybeExists:
      	On Error Goto oops
      	If Getfileattr(ppre & strDir) And 16 Then Exit Sub ' success
      oops:
      	Error Err, Error & " //" & Getthreadinfo(1) & ":" & Erl & "(" & strDir & ")"
       
      parentDoesNotExist: ' failed because parent directory doesn't exist. Build an array of directories to attempt.
      	Resume theLoop
      	
      theLoop:
      	parts = Split(strDir, "/")
      	For i = 1 To Ubound(parts)
      		parts(i) = parts(i-1) & "/" & parts(i)
      	Next
      	ptr = Ubound(parts) - 1 ' ptr is index of directory to try to create.
      	On Error 76 Goto backup
      tryAnother:
      	Mkdir ppre & parts(ptr)
      	' if we get here the create succeeded, and we only have to go forward in the list.
      	On Error Goto 0
      	For i = ptr+1 To Ubound(parts)
      		Mkdir ppre & parts(i)
      	Next
      	Exit Sub
      	
      backup:
      	ptr = ptr - 1
      	If ptr >= 0 Then
      		If parts(ptr) = "" Then Goto backup
      		Resume tryAnother
      	End If
      	Error Err, Error ' ran out of higher level directories to try.
      	
      	Exit Sub
      ERRHANDLE:
      	Error Err, Error & { //} & Getthreadinfo(1) & {:} & Erl
      End Sub
      
      
      
      
      
      
      '++LotusScript Development Environment:2:1:ClearFolder:6:8
      %REM
      	Function ClearFolder
      	Description: Remove all files and subfolders in a given folder, returning True if this worked.
      		The folder itself is not deleted. 
      %END REM
      Function ClearFolder(Byval strPath$ ) As Boolean
      	On Error Goto ERRHANDLE
      	ClearFolder = removeFolderRecursive(strPath, 0, False)
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & Getthreadinfo(1) & {:} & Erl
      End Function
      
      
      '++LotusScript Development Environment:2:1:removeFolderRecursive:14:8
      %REM
      	Function removeFolderRecursive
      	Description: Remove all contents of a given folder, including the folder if it
      		winds up being empty, recursively, provided the files are at least cutoffAge
      		days old. 
      	Parameters:
      		szPath: folder whose contents are to be deleted.
      		cutoffAge: number of days old a file must be to be deleted, 0 to delete all.
      		bDelFolder=true says to delete the folder whose path we're passed.
      			Otherwise only its contents are deleted (including subfolders).
      	Returns: True if all contents were successfully deleted. Failure might indicate some files
      		are locked, or the user doesn't have access.  
      %END REM
      Function removeFolderRecursive(Byval szPath$, Byval cutoffAge As Double, Byval bDelFolder As Boolean) As Boolean
      	Dim toKill$, szFile$, atts%, szFull$, bKill As Boolean, bKillDir As Boolean, ToKillDir$
      	On Error Goto ERRHANDLE
      	removeFolderRecursive = True
      	On Error Goto oops
      	Do
      		bKillDir = bDelFolder
      		bDelFolder = True	' after the first time we want to delete folders because they're subfolders
      		szFile = Dir$(szPath & "/*", 30)
      		Do While Len(szFile)
      			If szFile <> "." And szFile <> ".." Then
      				szFull = szPath & "/" & szFile
      				atts = Getfileattr(szFull)
      				If atts And 16 Then ' a directory
      					toKill = toKill & szFull & "*"
      				Else
      					If cutoffAge <= 0 Then
      						bKill = True
      					Else
      						bKill = (Now - Filedatetime(szFull) >= cutoffAge)
      					End If
      					
      					If bKill Then
      						If atts And 1 Then ' read only
      							SetFileAttr szFull, 0
      						End If
      						Kill szFull
      					Else
      						bKillDir = False
      						removeFolderRecursive = False
      					End If
      				End If
      			End If
      			szFile = Dir$
      		Loop
      		If bKillDir Then
      			' we found no files here we need to keep.
      			ToKillDir = szPath & "*" & ToKillDir
      		End If
      		szPath = Strleft(toKill, "*")
      		toKill = Mid$(toKill, Len(szPath) + 2)
      	Loop While Len(szPath)
      	
      	Do
      		szPath = Strleft(toKillDir, "*")
      		If szPath = "" Then Exit Function
      		toKillDir = Mid$(toKillDir, Len(szPath)+2)
      		Rmdir szPath 
      	Loop
      	Exit Function
      oops:
      	removeFolderRecursive = False
      	Resume Next
      	Exit Function
      ERRHANDLE:
      	Error Err, Error & { //} & Getthreadinfo(1) & {:} & Erl
      End Function
    signed: true
    nonsummary: true
  - name: $TITLE
    type: text
    data: TempFolderManager
    signed: true
remaining: []